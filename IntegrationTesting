build a database for testing


basically, to test a post, you post something
and then do a read to make sure it posted properly

in package.json add --verbose to test parameter

you may have to comment out winston stuff in logging.js if things freeze

++++++++++++++++++++++++++
set up a test database:
in config folder
in default.json add a new key: db:""
get the connection string from the db.js file 
copy the key,value and add it to test.json and change it to a new name

in db.js add
require.configand mongoose config.get('db')
`winston.info(`Connected to {config.get('db')}`)`

if you run node index.js, it will connect to the dev database
if you run NODE_ENV=test node index.js it will connect to the test database

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
write first integration tests
install a library called supertest - to send http requests
npm i supertest --save-dev

in index.js
create a server object to export by naming the app.listen and export it
const server = app.listen....
module.exports = server

in the tests folder add integration/genres.test.js
let server;
const request = require('supertest');

describe('/api/genres',()=>{  //inside here add more test suites
	beforeEach(()=>{server = require('../../index')})
	afterEach(() =>{server.close()})  // you need to start and stop the server for each test run 
									// or you will try to use an already open port		

	describe('GET /', ()=>{
		it('should return all genres',async ()=>{
			const res = await request(server).get('api/genres'); //request is a supertest function
			expect(res.status).toBe(200)
		})})

})
 
the genres test suite will include other test suitess
for  GET,POST , PUT etc..

++++++++++++++++++++++++++++++++++++++++++
Populate Test Database
in genres.test.js add
const {Genre} = require('../../models/genre)
add
await Genre.collection .insertMany([
	{name: 'genre1'}
	{name: 'genre2'}
])

expect(res.body.length).toBe(2)
//every time you run this test you add two more items to database so you should remove them
add the following to the afterEach(), mark that as async
await Genre.remove({});

++++++++++++++++++++++++++++++++++++++++++++
validating objectIDs
for testing whether we got the right answer for sending invalid id
we have to add middleware to return 404 instead of 500 for internal server error
the file added is validateObjectId.js


++++++++++++++++++++++++++++++++++++++++++
Refactoring for cleaner tests
appended simplification to end of file genres.test.js

+++++++++++++++++++++++++++++++++++++++++++
Testing the auth middleware

there are multiple paths in auth.js
that get tested in auth.test.js

+++++++++++++++++++++++++++++++++++++++++
to check for proper decoded password you need to do a unit test
tests>unittests/middleware>auth.test.js

++++++++++++++++++++++++++++++++++++++++
using jest to check for coverage

add --coverage to test item in package.json
you can check the coverage of your tests
you can see the report in vidly\coverage\...
there's an index.html
exclude the coverage files from git, in gitignore

the undone exercise is to test the put and delete routes


